merge master into local:
   git pull
   or maybe git merge
   ...for conflicts, edit, then git add THEFILE, and 'git commit' the whole merge
   -----------
merge fork into master
   git remote -v
   git remote add tlstream https://somewhere/stuff.git
   git fetch tlstream
   git merge tlstream/master
   git push

   
show stuff committed but not pushed:	git diff --stat --cached origin/master

undo last commit:                       git reset --soft 'HEAD^'
Remove all uncommitted working changes: git checkout -- .

ignore files:
 in top:  .gitignore, add (also add/commit that .gitignore file if you want each repo to use it!):
 	*.[ao]
	makedepend
	makedepend.bak
	.*swp

more detailed of what changed in commit, like file permissions:   git log --summary file
file history past renames:        git log --follow -p file
file history not past renames:    git log -s -p file

compare last 10 commits:          git diff HEAD~10 HEAD -- core/ustring.h
compare last 2 commits:           git diff HEAD~2 HEAD -- core/ustring.h

svn status:                       git status -s
commit all that's going LOCALLY:  git commit -a  -m 'message'
commit TO REMOTE MASTER BRANCH:   git push origin master


show diff of commit:                  git show aoeunth2394879a8oe7u9a7786aoe89u7o89ui7
show files changed in commit:         git diff-tree --no-commit-id --name-only -r aoeu987ao8eu77ao7eu987aoe89u7
show commits since a particular one:  git rev-list aoe9u78a9o8eu7a9oe7u8a79..HEAD

combine/merge last two commits:       git rebase -i HEAD~2

get short hash of head:               git rev-parse --short HEAD
if git tracks file, returns paths:    git ls-files filename

-------------stashing--------------------------
put away changes temporarily:      git stash
restore from a previous stash:     git stash apply


------------- remotes -----------------------
list remotes:            git remote
list remotes with urls:  git remote -v
add remote:              git remote add remoteName https://github.com/godotengine/godot


-------------tags------------------
checkout particular tag:  git checkout tags/(tag name)
list all tags:            git tag

-------------branches--------------------------
what branch are you on:            git branch

switch to branch:                  git checkout thebranch
list branches:                     git branch -a
compare between branches:          git diff mybranch master -- myfile.cs
compare files changed by branch:   git diff --name-only mybranch master
Create a new branch locally:       git checkout -b [name_of_your_new_branch]
Create branch from another:        git checkout -b [name_of_your_new_branch] [name of parent branch]
Push new branch to server:         git push -u origin [name_of_your_new_branch]  
delete local branch:               git branch -d [branch name]
delete local branch, force:        git branch -D [branch name]
rename a branch:                   git checkout oldbranch;  git branch -m newname;  git push origin --delete oldbranch;  git push origin -u newname
merge another branch into current: git checkout currentbranch;  git merge otherbranch
on merge failure, sometimes:       git reset --hard HEAD
                                   git clean -f -d   (git clean -f -d -n  <-  do a dry run)
                                   git pull
Merge conflict, use theirs:        git checkout --theirs file;  git add file

make local git know about remote source:      git remote add upstream https://github.com/godotengine/godot
pull from that remote source:                 git fetch upstream
merge without creating merge commit:          git pull --rebase upstream master  (git pull --rebase remoteName branchName)
  if conflicts, do the add/rm, then:          git rebase --continue

delete a branch:                              git branch -d branch_name
merge current changes with previous commit:   git commit --amend
Get a new remote branch without checkout:     git fetch origin BranchName:BranchName

Get sorted list of branch last modification times (note: possibility not be 100%.. check this):
  for k in `git branch -r | perl -pe 's/^..(.*?)( ->.*)?$/\1/'`; do echo -e `git show --pretty=format:"%Cgreen%ci %Cblue%cr%Creset" $k -- | head -n 1`\\t$k; done | sort -r > 


-------------- git lfs ---------------------
Initialize a repo to use lfs:       git lfs install;  git add .gitattributes
Define a pattern for lfs to track:  git lfs track '*.largestuff'
See what patterns are tracked:      git lfs track
See what files are tracked:         git lfs ls-files


-------------- pull requests -----------------------

git request-pull [-p] upstreamCommitHashToTarget urlOfRepoToPullFrom [endCommit]


-------------fixing--------------------------

restoring last revision of a file:
  git reset --hard    <- resets all files "unstages"
  git checkout HEAD -- filename



